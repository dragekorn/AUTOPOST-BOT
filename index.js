require('dotenv').config();
const { initializeBot } = require('./botService');
const { Scenes, session, Markup } = require('telegraf');
const rssService = require('./rssService');
const { processFile } = require('./moduleFiletoPost');
const { extractDomainName, formatPostMessage, successMessage, successMessageWithQuestion } = require('./utils');
const { User, UserProject, createNewProject, PostFile, findUser, addUserLicKey, Subscription, saveSubscription, deleteSubscription, getSubscriptions, getDetailedSubscriptions } = require('./databaseService');

const fs = require('fs');
const path = require('path');


const bot = initializeBot(process.env.TELEGRAM_BOT_TOKEN);

//—Å—Ü–µ–Ω–∞ RSS-–ø–æ–¥–ø–∏—Å–∫–∏
const subscribeScene = new Scenes.BaseScene('subscribeScene');
subscribeScene.enter((ctx) => {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ RSS —Å—Å—ã–ª–∫—É.', Markup.inlineKeyboard([
        Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')
    ]));
    ctx.session.awaitingInput = 'rssLink';
    ctx.session.timeout = setTimeout(() => {
        if (ctx.scene.current) {
            ctx.reply('–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É. –ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe');
            ctx.scene.leave();
        }
    }, 300000);
});

subscribeScene.on('text', async (ctx) => {
    if (ctx.session.awaitingInput === 'rssLink') {
        const rssLink = ctx.message.text;
        if (/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/.test(rssLink)) {
            ctx.session.rssLink = rssLink;
            ctx.session.awaitingInput = 'channelId';
            await ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã.');
        } else {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É.');
        }
    } else if (ctx.session.awaitingInput === 'channelId') {
        const channelId = ctx.message.text;
        if (/^-100\d{10}$/.test(channelId)) {
            let channelName = '';
            try {
                const chat = await bot.telegram.getChat(channelId);
                channelName = chat.title;
                await saveSubscription(ctx.from.id, ctx.session.rssLink, channelId, channelName);
                await ctx.replyWithHTML(`<b>–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSS-–ª–µ–Ω—Ç—ã!</b>\n\nRSS: ${ctx.session.rssLink}\n–ü–æ—Å—Ç—ã –ø–æ–π–¥—É—Ç –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É: ${channelName} [ID: ${channelId}]\n\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö RSS-–ª–µ–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n<b>–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!</b>`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üóÑ –ú–æ–∏ RSS –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'my_subscriptions' }
                            ]
                        ]
                    }
                });
                clearTimeout(ctx.session.timeout);
                ctx.scene.leave();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
        } else {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã. ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 13 —Ü–∏—Ñ—Ä.');
        }
    }
});

subscribeScene.action('cancel', (ctx) => {
    ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
    ctx.scene.enter('authScene');
});

//—Å—Ü–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authScene = new Scenes.BaseScene('authScene');
authScene.enter(async (ctx) => {
    const userId = ctx.from.id.toString();
    const user = await findUser(userId);

    if (user && user.licKeys) {
        ctx.reply(`–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞, ${user.username}! üòä\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å AUTOPOST BOT!\n\n–ñ–µ–ª–∞–µ–º –í–∞–º –ø—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã!`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚≠êÔ∏è RSS-–ø–æ—Å—Ç–∏–Ω–≥', callback_data: 'subscribe' },
                        { text: 'üìÇ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∏–∑ —Ñ–∞–π–ª–∞', callback_data: 'autopostfile' }
                    ],
                    [
                        { text: 'üóÑ –ú–æ–∏ RSS –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'my_subscriptions' }
                    ]
                ]
            }
        });
        ctx.scene.leave();
    } else {
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á.');
    }
});

authScene.on('text', async (ctx) => {
    const userKey = ctx.message.text;
    const keys = require('./key.json');

    if (keys.includes(userKey)) {
        const updatedKeys = keys.filter(key => key !== userKey);
        fs.writeFileSync('key.json', JSON.stringify(updatedKeys));

        await addUserLicKey(ctx.from.id.toString(), userKey, ctx.from.username);
        ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AUTOPOST BOT! –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚≠êÔ∏è RSS-–ø–æ—Å—Ç–∏–Ω–≥', callback_data: 'subscribe' },
                        { text: 'üìÇ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∏–∑ —Ñ–∞–π–ª–∞', callback_data: 'autopostfile' }
                    ],
                    [
                        { text: 'üóÑ –ú–æ–∏ RSS –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'my_subscriptions' }
                    ]
                ]
            }
        });
        ctx.scene.leave();
    } else {
        ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á.');
    }
});

//—Å—Ü–µ–Ω–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –±–µ–∑ —à–∞–±–ª–æ–Ω–∞
const autopostingScene = new Scenes.BaseScene('autopostingScene');

autopostingScene.enter(async (ctx) => {
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞.");
});

autopostingScene.on('text', async (ctx, next) => {
    const chatId = ctx.message.text;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–ª–∏ –ª–∏ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    if (/^-100\d+$/.test(ctx.message.text)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –ø—Ä–æ–µ–∫—Ç
        console.log('Session data:', ctx.session);
        if (checkReadyForAutoposting(ctx)) {
            const chatId = ctx.message.text;
            const userId = ctx.from.id.toString();
            const hasAdminRights = await checkBotAdminRights(ctx, chatId);

            if (hasAdminRights) {
                await startAutoposting(ctx, chatId, ctx.session.userId, ctx.session.projectId, ctx.session.delay);
                ctx.session.projectId = null; // –û—á–∏—â–∞–µ–º projectId –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
                ctx.session.delay = null; // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑ —Å–µ—Å—Å–∏–∏
            } else {
                await ctx.reply("–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ—Å–ª–µ —á–µ–≥–æ, —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å.");
            }
            await ctx.scene.leave(); // –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
        } else {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞.");
        }
    } else {
        // –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
        const projectName = ctx.message.text;
        const project = await UserProject.findOne({ projectName: projectName, userID: ctx.from.id.toString() });
        if (project) {
            ctx.session.projectId = project._id.toString();
            await ctx.reply("–ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏.", Markup.inlineKeyboard([
                Markup.button.callback('5 —Å–µ–∫—É–Ω–¥', 'delay_5000'),
                Markup.button.callback('10 —Å–µ–∫—É–Ω–¥', 'delay_10000'),
                Markup.button.callback('1 –º–∏–Ω—É—Ç–∞', 'delay_60000'),
                Markup.button.callback('10 –º–∏–Ω—É—Ç', 'delay_600000')
            ]));
        } else {
            await ctx.reply(`–ü—Ä–æ–µ–∫—Ç "${projectName}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.`);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        }
    }
});

//—Å—Ü–µ–Ω–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º
const selfTemplateScene = new Scenes.BaseScene('selfTemplateScene');

selfTemplateScene.enter((ctx) => {
    ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:');
});

selfTemplateScene.on('text', async (ctx) => {
    const projectName = ctx.message.text;
    const userId = ctx.from.id;

    try {
        const newProject = await createNewProject(userId, projectName, []);
        ctx.session.projectId = newProject._id;
        ctx.reply('–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
});

selfTemplateScene.on('document', async (ctx) => {
    const projectId = ctx.session.projectId;
    if (!projectId) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'selfTemplateScene' }],
                ]
            }
        });
        ctx.scene.leave();
        return;
    }

    // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    const fileId = ctx.message.document.file_id;
    const fileLink = await ctx.telegram.getFileLink(fileId);

    try {
        const projectPosts = await processFile(ctx, fileLink); // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        ctx.session.projectPosts = projectPosts; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
        // ctx.reply('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞.');
    } catch (error) {
        if (error instanceof TimeoutError) {
            ctx.reply('–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Ñ–∞–π–ª–æ–º –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.');
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }
});

// –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏ –∑–∞–ø–∏—Å—å –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
// selfTemplateScene.on('text', async (ctx, next) => {
//     if (ctx.message.text.startsWith('/')) {
//         return next();
//     }

//     const projectId = ctx.session.projectId;
//     const projectPosts = ctx.session.projectPosts;
//     if (!projectId || !projectPosts) {
//         ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –ø–æ—Å—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.', {
//             reply_markup: {
//                 inline_keyboard: [
//                     [{ text: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'selfTemplateScene' }],
//                 ]
//             }
//         });
//         ctx.scene.leave();
//         return;
//     }

//     // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è updateProjectPosts –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç, –¥–æ–±–∞–≤–ª—è—è –ø–æ—Å—Ç—ã —Å isSent: false
//     try {
//         await updateProjectPosts(projectId, projectPosts);
//         ctx.reply('–ü–æ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç –∏ –≥–æ—Ç–æ–≤—ã –∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É.');
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:', error);
//         ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
//     }

//     ctx.scene.leave();
// });

const stage = new Scenes.Stage();
stage.register(subscribeScene);
stage.register(authScene);
stage.register(autopostingScene);
stage.register(selfTemplateScene);
bot.use(session());
bot.use(stage.middleware());


bot.action(/delay_(\d+)/, async (ctx) => {
    const delay = Number(ctx.match[1]);
    if (!ctx.session) ctx.session = {}; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    ctx.session.delay = delay;
    ctx.session.userId = ctx.from.id.toString(); // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userId –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    await ctx.reply(`–ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${delay / 1000} —Å–µ–∫—É–Ω–¥. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞.`);
});

function checkReadyForAutoposting(ctx) {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏
    return ctx.session.projectId && ctx.session.delay && ctx.session.userId;
}

bot.action('selfTemplateScene', async (ctx) => {
    ctx.scene.enter('selfTemplateScene');
});

bot.action('auth', async (ctx) => {
    await ctx.scene.enter('authScene');
});

bot.action('cancel', (ctx) => {
    ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
    ctx.scene.enter('authScene');
});

bot.action('my_subscriptions', async (ctx) => {
    console.log("–ö–æ–º–∞–Ω–¥–∞ /my_subscriptions –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
    const userId = ctx.from.id.toString();
    const detailedSubscriptions = await getDetailedSubscriptions(userId);

    if (detailedSubscriptions.length === 0) {
        ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.üò≥\n\n–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å RSS-–ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å RSS-–ª–∏–Ω–∫', callback_data: 'subscribe' }],
                ]
            }
        });
        return;
    }

    let message = '<b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ RSS-–ª–µ–Ω—Ç—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n';
    const inlineKeyboard = [];

    detailedSubscriptions.forEach((sub, index) => {
        message += `üìú <b>${sub.channelName}</b>\n[ID: <code>${sub.channelId}</code>]\n`;

        sub.rssFeeds.forEach((feed, feedIndex) => {
            const domainName = extractDomainName(feed);
            message += `üîó <a href="${feed}">${domainName}</a>\n`;
            inlineKeyboard.push([{ text: `–£–¥–∞–ª–∏—Ç—å ${domainName}`, callback_data: `delete_${sub.subId}_${feedIndex}` }]);
        });

        if (index < detailedSubscriptions.length - 1) {
            message += '‚ûñ‚ûñ‚ûñ\n';
        }
    });

    inlineKeyboard.push([{ text: '‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å RSS-–ª–∏–Ω–∫', callback_data: 'subscribe' }]);

    ctx.replyWithHTML(message, {
        reply_markup: { inline_keyboard: inlineKeyboard }
    });
});

bot.action('buy', (ctx) => {
    const buyMessage = '<b>–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–ª—é—á, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, QR-–∫–æ–¥ –≤—ã—à–µ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É</b>\n\n<u>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å</u> @arhi_pro, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–± –æ–ø–ª–∞—Ç–µ.\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞, –í–∞–º –≤—ã–¥–∞–¥—É—Ç –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!\n\n<b>–ü—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º AUTOPOST BOT! ü§ñ</b> ';
    const imagePath = path.resolve(__dirname, 'qr.jpg');
    ctx.replyWithPhoto({ source: fs.createReadStream(imagePath) }, { 
        caption: buyMessage, 
        parse_mode: 'HTML',
        reply_markup:{
            inline_keyboard: [
                [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', callback_data: 'auth' }],
            ],
        },
    });
});

bot.action('subscribe', async (ctx) => {
    const userId = ctx.from.id.toString();
    const user = await findUser(userId);
    
    if (!user || !user.licKeys) {
        ctx.reply('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', callback_data: 'auth'}],
                ]
            }
        });
        return;
    }
    
    ctx.scene.enter('subscribeScene');
});

bot.action('autopostfile', async (ctx) => {
    const userId = ctx.from.id.toString();
    const user = await findUser(userId);

    if (!user || !user.licKeys) {
        await ctx.reply('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', callback_data: 'auth'}],
                ]
            }
        });
        return;
    }

    ctx.replyWithHTML('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–∫—Ü–∏—é –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìÉ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.', 
    Markup.inlineKeyboard([
        Markup.button.callback('üìÉ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', 'selfTemplateScene'),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
    ]));
    ctx.session.awaitingFile = true;
});

bot.on('document', async (ctx) => {
    if (ctx.session && ctx.session.awaitingFile) {
        try {

            const chatId = ctx.chat.id;
            const fileId = ctx.message.document.file_id;
            const fileLink = await ctx.telegram.getFileLink(fileId);

            ctx.reply('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...');

            await processFile(ctx, fileLink);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.');
        }

        delete ctx.session.awaitingFile;
    } else {
        ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ /autopostfile');
    }
});

bot.action(/delete_(.+)/, async (ctx) => {
    const subId = parseInt(ctx.match[1]);
  
    try {
      const result = await Subscription.findOneAndDelete({ subId: subId });
      if (result) {
        await ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');

        const userId = ctx.from.id.toString();
        const detailedSubscriptions = await getDetailedSubscriptions(userId);

        let messageText = '<b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ RSS-–ª–µ–Ω—Ç—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n';
        const inlineKeyboard = [];

        detailedSubscriptions.forEach((sub, index) => {
            messageText += `üìú <b>${sub.channelName}</b>\n[ID: <code>${sub.channelId}</code>]\n`;

            sub.rssFeeds.forEach((feed, feedIndex) => {
                const domainName = extractDomainName(feed);
                messageText += `üîó <a href="${feed}">${domainName}</a>\n`;
                inlineKeyboard.push([{ text: `–£–¥–∞–ª–∏—Ç—å ${domainName}`, callback_data: `delete_${sub.subId}_${feedIndex}` }]);
            });

        if (index < detailedSubscriptions.length - 1) {
            messageText += '‚ûñ‚ûñ‚ûñ\n';
        }
    });

        inlineKeyboard.push([{ text: '‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å RSS-–ª–∏–Ω–∫', callback_data: 'subscribe' }]);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.editMessageText(messageText, { parse_mode: 'HTML', reply_markup: { inline_keyboard: inlineKeyboard } });
      } else {
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É', true);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏', true);
    }
});

bot.action('load_data', async (ctx) => {
    if (!ctx.session.xlsxData) {
      ctx.reply('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞.');
      return;
    }
  
    const data = ctx.session.xlsxData;
  
    try {
      for (const row of data) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
        await PostFile.create({ data: row.filter(cell => cell !== null) }); // –ò—Å–∫–ª—é—á–∞–µ–º null (–ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏)
      }
  
      ctx.reply(`–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –ø–æ—Å—Ç–æ–≤.`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    } finally {
      delete ctx.session.xlsxData;
    }
  });


bot.on('text', async (ctx) => {
    if (ctx.session.rssLink) {
        const channelOrGroupId = ctx.message.text;
        const userId = ctx.from.id;
        const rssLink = ctx.session.rssLink;

        try {
            await saveSubscription(bot, userId, rssLink, channelOrGroupId);
            ctx.reply(`–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${rssLink} –¥–ª—è –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã: ${channelOrGroupId}`);
            delete ctx.session.rssLink;
        } catch (error) {
            console.error(error);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ.');
        }
    }
});


bot.action('start_autoposting', async (ctx) => {
    await ctx.scene.enter('autopostingScene');
});


bot.action('pause_autoposting', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    await updateUserAutopostingStatus(userId, { autopostingActive: false });

    await ctx.reply('–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –Ω–∞–∂–∞–≤ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥".', Markup.inlineKeyboard([
        Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥', 'resume_autoposting')
    ]));
});

bot.action('cancel_autoposting', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    await cancelUserAutoposting(userId);

    await ctx.reply('–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.', Markup.inlineKeyboard([
        Markup.button.callback('–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥', 'start_autoposting'),
        Markup.button.callback('–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã', 'autopostfile')
    ]));
});

bot.action('resume_autoposting', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    await updateUserAutopostingStatus(userId, { autopostingActive: true });

    await ctx.reply('–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ—Å—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π.');
});

const checkAndSendUpdates = async () => {
    const subscriptions = await getSubscriptions();

    for (const subscription of subscriptions) {
        const { channelId, rssLink } = subscription;
        if (!channelId) {
            //console.warn(`chatId –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${rssLink} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`);
            continue;
        }

        const newPosts = await rssService.getNewRSSPosts(rssLink, channelId);
        for (const post of newPosts) {
            try {
                if (post.imagePath) {
                    await bot.telegram.sendPhoto(channelId, {
                        source: fs.createReadStream(post.imagePath),
                        caption: post.formattedPost,
                        parse_mode: 'HTML'
                    });
                    fs.unlinkSync(post.imagePath);
                } else {
                    await bot.telegram.sendMessage(channelId, post.formattedPost, { parse_mode: 'HTML', disable_web_page_preview: true });
                }
            } catch (error) {
                if (error.response && error.response.error_code === 429) {
                    const retryAfter = error.response.parameters.retry_after * 1000;
                    console.log(`Waiting for ${retryAfter}ms before retrying...`);
                    setTimeout(() => checkAndSendUpdates(), retryAfter);
                    return;
                } else {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${channelId}:`, error);
                }
            }
        }
    }
};

async function checkBotAdminRights(ctx, chatId) {
    try {
        const member = await ctx.telegram.getChatMember(chatId, ctx.botInfo.id);
        if (member.status === 'administrator' && member.can_post_messages) {
            return true;
        } else {
            return false;
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞:", error);
        return false;
    }
}

async function safeSendMessage(ctx, chatId, message, options) {
    try {
        await ctx.telegram.sendMessage(chatId, message, options);
    } catch (error) {
        if (error.code === 429) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            const retryAfter = error.parameters.retry_after;
            console.log(`Rate limit hit, waiting for ${retryAfter} seconds`);
            await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            await ctx.telegram.sendMessage(chatId, message, options);
        } else {
            throw error; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏, –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
        }
    }
}

function formatTime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secondsLeft = seconds % 60;

    return [
        hours.toString().padStart(2, '0'),
        minutes.toString().padStart(2, '0'),
        secondsLeft.toString().padStart(2, '0')
    ].join(':');
}

async function startAutoposting(ctx, chatId, userId, projectId, delay) {
    const projectExists = await UserProject.exists({ _id: projectId, userID: userId });
    if (!projectExists) {
        await ctx.reply("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.");
        return;
    }

    const postsToSend = await PostFile.find({ projectId: projectId, isSent: false });
    const totalPosts = postsToSend.length;
    let sentCount = 0;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ
    const statusMessage = await ctx.reply(`–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.\n\n–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n–°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: ${totalPosts}\n\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: ${totalPosts * delay / 1000} —Å–µ–∫—É–Ω–¥\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.`);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
    const updateStatusMessage = async () => {
        const sentPosts = await PostFile.countDocuments({ projectId: projectId, isSent: true });
        const remainingPosts = totalPosts - sentPosts;
        const estimatedTimeSeconds = remainingPosts * delay / 1000;
        const estimatedTimeFormatted = formatTime(estimatedTimeSeconds);
    
        await ctx.telegram.editMessageText(ctx.chat.id, statusMessage.message_id, null, `<b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.</b>\n\n–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentPosts}\n–°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: ${remainingPosts}\n\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: ${estimatedTimeFormatted}\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.`, { parse_mode: 'HTML' });
    };

    const messageTemplate = '<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã</b>: {0}\n<b>–ò–ù–ù</b>: {1}\n...';
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    for (let i = 0; i < totalPosts; i++) {
        const post = postsToSend[i];
        setTimeout(async () => {
            if (!post.isSent) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
                const formattedMessage = formatPostMessage(post, messageTemplate);
                await safeSendMessage(ctx, chatId, formattedMessage, { parse_mode: 'HTML' });
                post.isSent = true;
                await post.save();
                sentCount++;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await updateStatusMessage();
            }
        }, delay * i);
    }

    // –ó–¥–µ—Å—å –Ω–µ—Ç –Ω—É–∂–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
}



setInterval(checkAndSendUpdates, 60000);

bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
});