require('dotenv').config();
const { initializeBot } = require('./botService');
const { Scenes, session, Markup } = require('telegraf');
const rssService = require('./rssService');
const { processFile } = require('./moduleFiletoPost');
const { extractDomainName, formatPostMessage, successMessage, successMessageWithQuestion } = require('./utils');
const { User, UserProject, createNewProject, PostFile, findUser, addUserLicKey, Subscription, saveSubscription, deleteSubscription, getSubscriptions, getDetailedSubscriptions } = require('./databaseService');

const fs = require('fs');
const path = require('path');


const bot = initializeBot(process.env.TELEGRAM_BOT_TOKEN);

//—Å—Ü–µ–Ω–∞ RSS-–ø–æ–¥–ø–∏—Å–∫–∏
const subscribeScene = new Scenes.BaseScene('subscribeScene');
subscribeScene.enter((ctx) => {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ RSS —Å—Å—ã–ª–∫—É.', Markup.inlineKeyboard([
        Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')
    ]));
    ctx.session.awaitingInput = 'rssLink';
    ctx.session.timeout = setTimeout(() => {
        if (ctx.scene.current) {
            ctx.reply('–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É. –ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe');
            ctx.scene.leave();
        }
    }, 300000);
});

subscribeScene.on('text', async (ctx) => {
    if (ctx.session.awaitingInput === 'rssLink') {
        const rssLink = ctx.message.text;
        if (/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/.test(rssLink)) {
            ctx.session.rssLink = rssLink;
            ctx.session.awaitingInput = 'channelId';
            await ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã.');
        } else {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É.');
        }
    } else if (ctx.session.awaitingInput === 'channelId') {
        const channelId = ctx.message.text;
        if (/^-100\d{10}$/.test(channelId)) {
            let channelName = '';
            try {
                const chat = await bot.telegram.getChat(channelId);
                channelName = chat.title;
                await saveSubscription(ctx.from.id, ctx.session.rssLink, channelId, channelName);
                await ctx.replyWithHTML(`<b>–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSS-–ª–µ–Ω—Ç—ã!</b>\n\nRSS: ${ctx.session.rssLink}\n–ü–æ—Å—Ç—ã –ø–æ–π–¥—É—Ç –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É: ${channelName} [ID: ${channelId}]\n\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö RSS-–ª–µ–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n<b>–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!</b>`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üóÑ –ú–æ–∏ RSS –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'my_subscriptions' }
                            ]
                        ]
                    }
                });
                clearTimeout(ctx.session.timeout);
                ctx.scene.leave();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
        } else {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã. ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 13 —Ü–∏—Ñ—Ä.');
        }
    }
});

subscribeScene.action('cancel', (ctx) => {
    ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
    ctx.scene.enter('authScene');
});

//—Å—Ü–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authScene = new Scenes.BaseScene('authScene');
authScene.enter(async (ctx) => {
    const userId = ctx.from.id.toString();
    const user = await findUser(userId);

    if (user && user.licKeys) {
        ctx.reply(`–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞, ${user.username}! üòä\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å AUTOPOST BOT!\n\n–ñ–µ–ª–∞–µ–º –í–∞–º –ø—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã!`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚≠êÔ∏è RSS-–ø–æ—Å—Ç–∏–Ω–≥', callback_data: 'subscribe' },
                        { text: 'üìÇ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∏–∑ —Ñ–∞–π–ª–∞', callback_data: 'autopostfile' }
                    ],
                    [
                        { text: 'üóÑ –ú–æ–∏ RSS –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'my_subscriptions' }
                    ]
                ]
            }
        });
        ctx.scene.leave();
    } else {
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á.');
    }
});

authScene.on('text', async (ctx) => {
    const userKey = ctx.message.text;
    const keys = require('./key.json');

    if (keys.includes(userKey)) {
        const updatedKeys = keys.filter(key => key !== userKey);
        fs.writeFileSync('key.json', JSON.stringify(updatedKeys));

        await addUserLicKey(ctx.from.id.toString(), userKey, ctx.from.username);
        ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AUTOPOST BOT! –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚≠êÔ∏è RSS-–ø–æ—Å—Ç–∏–Ω–≥', callback_data: 'subscribe' },
                        { text: 'üìÇ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∏–∑ —Ñ–∞–π–ª–∞', callback_data: 'autopostfile' }
                    ],
                    [
                        { text: 'üóÑ –ú–æ–∏ RSS –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'my_subscriptions' }
                    ]
                ]
            }
        });
        ctx.scene.leave();
    } else {
        ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á.');
    }
});

//—Å—Ü–µ–Ω–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –±–µ–∑ —à–∞–±–ª–æ–Ω–∞
const autopostingScene = new Scenes.BaseScene('autopostingScene');

autopostingScene.enter(async (ctx) => {
    const userId = ctx.from.id.toString();
    const projects = await UserProject.find({ userID: userId });
    
    if (projects.length > 0) {
        let messageText = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:\n';
        const projectsKeyboard = projects.map(project =>
            Markup.button.callback(project.projectName, `select_project_${project._id}`)
        );

        await ctx.reply(messageText, Markup.inlineKeyboard([...projectsKeyboard, Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]));
    } else {
        await ctx.reply("–£ –í–∞—Å –µ—â—ë –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
            Markup.inlineKeyboard([Markup.button.callback('üìÉ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', 'selfTemplateScene'), Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')])
        );
    }
});

autopostingScene.on('text', async (ctx) => {
    const chatId = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ID –∫–∞–Ω–∞–ª–∞
    if (/^-100\d+$/.test(chatId)) {
        if (ctx.session.projectId && ctx.session.delay) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–¥–µ—Ä–∂–∫–∞
            const hasAdminRights = await checkBotAdminRights(ctx, chatId);

            if (hasAdminRights) {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
                await startAutoposting(ctx, chatId, ctx.from.id.toString(), ctx.session.projectId, ctx.session.delay);
                ctx.session.projectId = null;
                ctx.session.delay = null;
                ctx.scene.leave();
            } else {
                await ctx.reply("–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
            }
        } else {
            await ctx.reply("–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É.");
        }
    } else {
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã.");
    }
});

//—Å—Ü–µ–Ω–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º
const selfTemplateScene = new Scenes.BaseScene('selfTemplateScene');

selfTemplateScene.enter((ctx) => {
    ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:');
});

selfTemplateScene.on('text', async (ctx) => {
    const projectName = ctx.message.text;
    const userId = ctx.from.id.toString();

     const existingProject = await UserProject.findOne({ projectName: projectName, userID: userId });
     if (existingProject) {
         await ctx.reply('–ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
         return;
     }

    try {
        const newProject = await createNewProject(userId, projectName, []);
        ctx.session.projectId = newProject._id;
        ctx.reply('–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
});

selfTemplateScene.on('document', async (ctx) => {
    const projectId = ctx.session.projectId;
    if (!projectId) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'selfTemplateScene' }],
                ]
            }
        });
        ctx.scene.leave();
        return;
    }

    // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    const fileId = ctx.message.document.file_id;
    const fileLink = await ctx.telegram.getFileLink(fileId);

    try {
        const projectPosts = await processFile(ctx, fileLink); // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        ctx.session.projectPosts = projectPosts; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
        // ctx.reply('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞.');
    } catch (error) {
        if (error instanceof TimeoutError) {
            ctx.reply('–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Ñ–∞–π–ª–æ–º –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.');
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }
});

// –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏ –∑–∞–ø–∏—Å—å –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
// selfTemplateScene.on('text', async (ctx, next) => {
//     if (ctx.message.text.startsWith('/')) {
//         return next();
//     }

//     const projectId = ctx.session.projectId;
//     const projectPosts = ctx.session.projectPosts;
//     if (!projectId || !projectPosts) {
//         ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –ø–æ—Å—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.', {
//             reply_markup: {
//                 inline_keyboard: [
//                     [{ text: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'selfTemplateScene' }],
//                 ]
//             }
//         });
//         ctx.scene.leave();
//         return;
//     }

//     // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è updateProjectPosts –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç, –¥–æ–±–∞–≤–ª—è—è –ø–æ—Å—Ç—ã —Å isSent: false
//     try {
//         await updateProjectPosts(projectId, projectPosts);
//         ctx.reply('–ü–æ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç –∏ –≥–æ—Ç–æ–≤—ã –∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É.');
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:', error);
//         ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
//     }

//     ctx.scene.leave();
// });

const stage = new Scenes.Stage();
stage.register(subscribeScene);
stage.register(authScene);
stage.register(autopostingScene);
stage.register(selfTemplateScene);
bot.use(session());
bot.use(stage.middleware());


// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
bot.action(/select_project_(.+)/, async (ctx) => {
    const selectedProjectId = ctx.match[1];
    ctx.session.projectId = selectedProjectId;

    // –ó–∞–ø—Ä–æ—Å –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    await ctx.reply("–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏.", Markup.inlineKeyboard([
        Markup.button.callback('5 —Å–µ–∫—É–Ω–¥', 'delay_5000'),
        Markup.button.callback('10 —Å–µ–∫—É–Ω–¥', 'delay_10000'),
        Markup.button.callback('1 –º–∏–Ω—É—Ç–∞', 'delay_60000'),
        Markup.button.callback('10 –º–∏–Ω—É—Ç', 'delay_600000')
    ]));
});

bot.action(/delay_(\d+)/, async (ctx) => {
    const delay = Number(ctx.match[1]);
    ctx.session.delay = delay;

    // –ó–∞–ø—Ä–æ—Å ID –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
    await ctx.reply(`–ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${delay / 1000} —Å–µ–∫—É–Ω–¥. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞.`);
});

function checkReadyForAutoposting(ctx) {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏
    return ctx.session.projectId && ctx.session.delay && ctx.session.userId;
}

bot.action('selfTemplateScene', async (ctx) => {
    ctx.scene.enter('selfTemplateScene');
});

bot.action('auth', async (ctx) => {
    await ctx.scene.enter('authScene');
});

bot.action('cancel', (ctx) => {
    ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
    ctx.scene.enter('authScene');
});

bot.action('my_subscriptions', async (ctx) => {
    console.log("–ö–æ–º–∞–Ω–¥–∞ /my_subscriptions –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
    const userId = ctx.from.id.toString();
    const detailedSubscriptions = await getDetailedSubscriptions(userId);

    if (detailedSubscriptions.length === 0) {
        ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.üò≥\n\n–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å RSS-–ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å RSS-–ª–∏–Ω–∫', callback_data: 'subscribe' }],
                ]
            }
        });
        return;
    }

    let message = '<b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ RSS-–ª–µ–Ω—Ç—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n';
    const inlineKeyboard = [];

    detailedSubscriptions.forEach((sub, index) => {
        message += `üìú <b>${sub.channelName}</b>\n[ID: <code>${sub.channelId}</code>]\n`;

        sub.rssFeeds.forEach((feed, feedIndex) => {
            const domainName = extractDomainName(feed);
            message += `üîó <a href="${feed}">${domainName}</a>\n`;
            inlineKeyboard.push([{ text: `–£–¥–∞–ª–∏—Ç—å ${domainName}`, callback_data: `delete_${sub.subId}_${feedIndex}` }]);
        });

        if (index < detailedSubscriptions.length - 1) {
            message += '‚ûñ‚ûñ‚ûñ\n';
        }
    });

    inlineKeyboard.push([{ text: '‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å RSS-–ª–∏–Ω–∫', callback_data: 'subscribe' }]);

    ctx.replyWithHTML(message, {
        reply_markup: { inline_keyboard: inlineKeyboard }
    });
});

bot.action('buy', (ctx) => {
    const buyMessage = '<b>–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–ª—é—á, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, QR-–∫–æ–¥ –≤—ã—à–µ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É</b>\n\n<u>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å</u> @arhi_pro, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–± –æ–ø–ª–∞—Ç–µ.\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞, –í–∞–º –≤—ã–¥–∞–¥—É—Ç –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!\n\n<b>–ü—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º AUTOPOST BOT! ü§ñ</b> ';
    const imagePath = path.resolve(__dirname, 'qr.jpg');
    ctx.replyWithPhoto({ source: fs.createReadStream(imagePath) }, { 
        caption: buyMessage, 
        parse_mode: 'HTML',
        reply_markup:{
            inline_keyboard: [
                [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', callback_data: 'auth' }],
            ],
        },
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
bot.action('comments', async (ctx) => {
    try {
        // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –∏–ª–∏ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ
        // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
        ctx.replyWithInvoice({
            title: '–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º',
            description: '–í—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –≤—ã–±—Ä–∞–Ω—ã–º –ø–æ—Å—Ç–æ–º. –¢–∞–∫ –∂–µ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 100 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π.\n\n*–£—Å–ª–æ–≤–∏—è*',
            payload: 'unique_payload', // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–Ω—É—Ç—Ä–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
            provider_token: '381764678:TEST:79618', // –¢–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –ÆKassa
            currency: 'RUB',
            prices: [{ label: '–î–æ—Å—Ç—É–ø –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º', amount: 10000 }], // –°—É–º–º–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (–∫–æ–ø–µ–π–∫–∞—Ö/—Ü–µ–Ω—Ç–∞—Ö)
            start_parameter: 'get_access',
            photo_url: 'https://i.imgur.com/2ytIhrE.png',
            is_flexible: false // –ù–∞–ª–æ–≥ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–æ–π—Å:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–æ–π—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
});

let awaitingPostForward = {};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
bot.on('successful_payment', async (ctx) => {
    const userId = ctx.update.message.from.id.toString();
    awaitingPostForward[userId] = true;
    console.log(`–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω: userId=${userId}`);
    const amountPaid = ctx.update.message.successful_payment.total_amount; // –°—É–º–º–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã (–∫–æ–ø–µ–π–∫–∞—Ö)

    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
        const tokensAdded = await updateUserPaymentStatus(userId, true, amountPaid);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
        await ctx.reply(`–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–ø–ª–∞—Ç—É! –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ ${tokensAdded} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π.\n\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è message_id –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
async function addUserAllowedMessageId(userId, messageId) {
    // –ü—Ä–∏–≤–æ–¥–∏–º messageId –∫ —á–∏—Å–ª—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    const numericMessageId = parseInt(messageId, 10);
    try {
        const user = await User.findOne({ userId: userId });
        if (user) {
            if (!user.allowedMessageIds.includes(numericMessageId)) {
                user.allowedMessageIds.push(numericMessageId);
                await user.save();
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é: userId=${userId}, messageId=${numericMessageId}`);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ message_id:', error);
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query
bot.on('pre_checkout_query', (ctx) => {
    // Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è pre_checkout_query
    ctx.answerPreCheckoutQuery(true).catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ pre_checkout_query:', error));
});

bot.action('subscribe', async (ctx) => {
    const userId = ctx.from.id.toString();
    const user = await findUser(userId);
    
    if (!user || !user.licKeys) {
        ctx.reply('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', callback_data: 'auth'}],
                ]
            }
        });
        return;
    }
    
    ctx.scene.enter('subscribeScene');
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
async function updateUserPaymentStatus(userId, hasPaid, amountPaid) {
    const tokensToAdd = amountPaid; // 100 —Ä—É–±–ª–µ–π = 100 —Ç–æ–∫–µ–Ω–æ–≤, amountPaid –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    const subscriptionDuration = 30; // –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö

    try {
        const user = await User.findOne({ userId: userId });
        if (user) {
            user.hasPaid = hasPaid;
            user.paymentDate = new Date(); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
            user.tokens += tokensToAdd / 100; // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
            user.subscriptionEndDate = new Date(user.paymentDate.getTime() + (subscriptionDuration * 24 * 60 * 60 * 1000)); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏

            await user.save();
            console.log(`–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–æ–∫–µ–Ω–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${tokensToAdd / 100}. –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ: ${user.subscriptionEndDate}`);

            return tokensToAdd / 100; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
}

bot.action('autopostfile', async (ctx) => {
    const userId = ctx.from.id.toString();
    const user = await findUser(userId);

    if (!user || !user.licKeys) {
        await ctx.reply('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', callback_data: 'auth'}],
                ]
            }
        });
        return;
    }

    const projects = await UserProject.find({ userID: userId });
    let messageText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–∫—Ü–∏—é –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞.\n\n';

    let keyboardOptions = [
        [Markup.button.callback('üìÉ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', 'selfTemplateScene'), Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')],
        [Markup.button.callback('‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥', 'start_autoposting')]
    ];

    if (projects && projects.length > 0) {
        messageText += '–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π:\n';
        for (const project of projects) {
            const sentMessagesCount = await PostFile.countDocuments({ projectId: project._id, isSent: true });
            const pendingMessagesCount = await PostFile.countDocuments({ projectId: project._id, isSent: false });

            messageText += `üìÅ ${project.projectName}\n`;
            messageText += `   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentMessagesCount}\n`;
            messageText += `   üïí –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${pendingMessagesCount}\n\n`;

            keyboardOptions.push([Markup.button.callback(`üóë –£–¥–∞–ª–∏—Ç—å ${project.projectName}`, `delete_project_${project._id}`)]);
        }
    } else {
        messageText += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.';
    }

    await ctx.replyWithHTML(messageText, Markup.inlineKeyboard(keyboardOptions));
    ctx.session.awaitingFile = true;
});



bot.action(/delete_project_(.+)/, async (ctx) => {
    const projectId = ctx.match[1]; // –ò–∑–≤–ª–µ–∫–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ callback_data
    const userId = ctx.from.id.toString(); // –ü–æ–ª—É—á–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try {
        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–µ–∫—Ç–æ–º
        await PostFile.deleteMany({ projectId: projectId });

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        await UserProject.findByIdAndDelete(projectId);

        // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const projects = await UserProject.find({ userID: userId });

        let messageText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–∫—Ü–∏—é –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞.\n\n';
        let keyboardOptions = [
            [Markup.button.callback('üìÉ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', 'selfTemplateScene'), Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')],
            [Markup.button.callback('‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥', 'start_autoposting')]
        ];

        if (projects && projects.length > 0) {
            messageText += '–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π:\n';
            for (const project of projects) {
                const sentMessagesCount = await PostFile.countDocuments({ projectId: project._id, isSent: true });
                const pendingMessagesCount = await PostFile.countDocuments({ projectId: project._id, isSent: false });

                messageText += `üìÅ ${project.projectName}\n`;
                messageText += `   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentMessagesCount}\n`;
                messageText += `   üïí –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${pendingMessagesCount}\n\n`;

                keyboardOptions.push([Markup.button.callback(`üóë –£–¥–∞–ª–∏—Ç—å ${project.projectName}`, `delete_project_${project._id}`)]);
            }
        } else {
            messageText += '–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤
        await ctx.editMessageText(messageText, Markup.inlineKeyboard(keyboardOptions));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ—Å—Ç–æ–≤:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', true);
    }
});


// –û–ü–õ–ê–¢–ê –ò –ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ò–Ø –í –°–í–Ø–ó–ê–ù–ù–û–ô –ì–†–£–ü–ü–ï

// –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function upsertUser(userId, username) {
    try {
        // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = await User.findOne({ userId: userId }).exec();

        if (existingUser) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            existingUser.username = username;
            await existingUser.save();
            return existingUser;
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
            const newUser = new User({
                userId: userId,
                username: username,
                hasPaid: false,
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                tokens: 0, // –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                subscriptionEndDate: null // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            });
            await newUser.save();
            return newUser;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error; // –ü—Ä–æ–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
    }
}

async function hasUserPaid(userId) {
    try {
        const user = await User.findOne({ 'telegramId': userId }).exec();
        return user && user.hasPaid;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
async function canUserCommentOnPost(userId, messageId) {
    const user = await User.findOne({ userId: userId });
    const numericMessageId = parseInt(messageId, 10);
    const canComment = user && user.allowedMessageIds.includes(numericMessageId);
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: user=${userId}, messageId=${messageId}, canComment=${canComment}`);
    return canComment;
}

bot.on('message', async (ctx) => {
    const userId = ctx.from.id.toString();
    const currentDate = new Date();
    const user = await upsertUser(userId, ctx.from.username || `${ctx.from.first_name} ${ctx.from.last_name}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.isBlocked && currentDate <= user.blockExpiresAt) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—ã—Ç–∞–ª—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ ${user.blockExpiresAt}.`);
        
        await ctx.deleteMessage(ctx.message.message_id);

        ctx.reply(`–£–≤–∞–∂–∞–µ–º—ã–π [${ctx.from.first_name}](tg://user?id=${userId}), –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ ${user.blockExpiresAt}. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.`, {
            parse_mode: 'Markdown',
            disable_web_page_preview: true
        });
        return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    }

    if (awaitingPostForward[userId]) {
        const messageText = ctx.message.text;
        const match = messageText.match(/https:\/\/t.me\/[^\/]+\/(\d+)/);
        if (match) {
            const discussionMessageId = parseInt(match[1], 10);
            await addUserAllowedMessageId(userId, discussionMessageId);
            ctx.reply('–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
            awaitingPostForward[userId] = false;
        } else {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π.');
        }
        return;
    }

    if (ctx.message.from.is_bot || ctx.message.forward_from_chat) {
        return;
    }

    if (ctx.chat.type === 'supergroup' || ctx.chat.type === 'group') {
        const currentDate = new Date();
        const user = await upsertUser(userId, ctx.from.username || `${ctx.from.first_name} ${ctx.from.last_name}`);
        const isAdmin = (await ctx.telegram.getChatAdministrators(ctx.chat.id)).some(admin => admin.user.id === parseInt(userId));

        if (isAdmin || user.isBlocked && user.blockExpiresAt > currentDate) {
            return;
        }

        if (!ctx.message.reply_to_message) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (user.isBlocked && currentDate <= user.blockExpiresAt) {
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—ã—Ç–∞–ª—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ ${user.blockExpiresAt}.`);
                return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç
            }
        
            if (user.tokens > 0 && user.subscriptionEndDate && currentDate <= user.subscriptionEndDate) {
                user.tokens -= 1;
                await user.save();
                console.log(`–°–ø–∏—Å–∞–Ω 1 —Ç–æ–∫–µ–Ω –∑–∞ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã: ${user.tokens}.`);
            } else {
                user.warningCount = (user.warningCount || 0) + 1;
                await user.save();

                if (user.warningCount >= 5) {
                    user.isBlocked = true;
                    user.blockExpiresAt = new Date(currentDate.getTime() + 24 * 60 * 60 * 1000); // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ 24 —á–∞—Å–∞
                    user.warningCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                    await user.save();
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    const replyMessage = await ctx.reply(`–£–≤–∞–∂–∞–µ–º—ã–π [${ctx.from.first_name}](tg://user?id=${userId}), –≤—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —á–∞—Å—Ç—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Å–Ω—è—Ç–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.`, {
                        parse_mode: 'Markdown',
                        disable_web_page_preview: true,
                        reply_to_message_id: ctx.message.message_id
                    });
                    
                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await ctx.deleteMessage(ctx.message.message_id);
                    
                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                    setTimeout(async () => {
                        try {
                            await ctx.telegram.deleteMessage(replyMessage.chat.id, replyMessage.message_id);
                        } catch (error) {
                            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: ", error);
                        }
                    }, 30000); // 30 —Å–µ–∫—É–Ω–¥
                } else {
                    await ctx.deleteMessage(ctx.message.message_id);
                    
                    const replyMessage = ctx.reply(`–£–≤–∞–∂–∞–µ–º—ã–π [${ctx.from.first_name}](tg://user?id=${userId}), —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${5 - user.warningCount}. [–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø](https://telegra.ph/Oplata-vozmozhnosti-kommentirovaniya-03-05)`, {
                        parse_mode: 'Markdown',
                        disable_web_page_preview: true,
                        reply_to_message_id: ctx.message.message_id
                    });

                    // –ß–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
                        setTimeout(async () => {
                            try {
                                await ctx.deleteMessage(replyMessage.message_id);
                            } catch (error) {
                                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: ", error);
                            }
                        }, 30000); // 30 —Å–µ–∫—É–Ω–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                }
            }
            return;
        }

        const replyToMessageId = ctx.message.reply_to_message.message_id;
        const canComment = user.allowedMessageIds.includes(replyToMessageId) || (user.tokens > 0 && user.subscriptionEndDate && currentDate <= user.subscriptionEndDate);

        if (canComment) {
            if (!user.allowedMessageIds.includes(replyToMessageId)) { // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º—ã–π –ø–æ—Å—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω, —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
                user.tokens -= 1;
                await user.save();
                console.log(`–°–ø–∏—Å–∞–Ω 1 —Ç–æ–∫–µ–Ω –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}. –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã: ${user.tokens}.`);
            }
        } else {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            user.warningCount = (user.warningCount || 0) + 1;
            await user.save();
        
            let replyText;
        
            if (user.warningCount >= 5) {
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 24 —á–∞—Å–∞
                user.isBlocked = true;
                user.blockExpiresAt = new Date(new Date().getTime() + 24 * 60 * 60 * 1000); // –î–æ–±–∞–≤–ª—è–µ–º 24 —á–∞—Å–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
                user.warningCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                await user.save();
        
                replyText = `–£–≤–∞–∂–∞–µ–º—ã–π [${ctx.from.first_name}](tg://user?id=${userId}), –≤—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —á–∞—Å—Ç—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Å–Ω—è—Ç–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.`;
            } else {
                replyText = `–£–≤–∞–∂–∞–µ–º—ã–π [${ctx.from.first_name}](tg://user?id=${userId}), –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${5 - user.warningCount}.\n\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. [–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø](https://telegra.ph/Oplata-vozmozhnosti-kommentirovaniya-03-05)`;
            }
        
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ ID
            const replyMessage = await ctx.reply(replyText, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true,
                reply_to_message_id: ctx.message.message_id
            });
        
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await ctx.deleteMessage(ctx.message.message_id);
        
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            setTimeout(async () => {
                try {
                    await ctx.telegram.deleteMessage(replyMessage.chat.id, replyMessage.message_id);
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: ", error);
                }
            }, 30000); // 30 —Å–µ–∫—É–Ω–¥
        }
    }
});

bot.action(/delete_(.+)/, async (ctx) => {
    const subId = parseInt(ctx.match[1]);
  
    try {
      const result = await Subscription.findOneAndDelete({ subId: subId });
      if (result) {
        await ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');

        const userId = ctx.from.id.toString();
        const detailedSubscriptions = await getDetailedSubscriptions(userId);

        let messageText = '<b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ RSS-–ª–µ–Ω—Ç—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n';
        const inlineKeyboard = [];

        detailedSubscriptions.forEach((sub, index) => {
            messageText += `üìú <b>${sub.channelName}</b>\n[ID: <code>${sub.channelId}</code>]\n`;

            sub.rssFeeds.forEach((feed, feedIndex) => {
                const domainName = extractDomainName(feed);
                messageText += `üîó <a href="${feed}">${domainName}</a>\n`;
                inlineKeyboard.push([{ text: `–£–¥–∞–ª–∏—Ç—å ${domainName}`, callback_data: `delete_${sub.subId}_${feedIndex}` }]);
            });

        if (index < detailedSubscriptions.length - 1) {
            messageText += '‚ûñ‚ûñ‚ûñ\n';
        }
    });

        inlineKeyboard.push([{ text: '‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å RSS-–ª–∏–Ω–∫', callback_data: 'subscribe' }]);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.editMessageText(messageText, { parse_mode: 'HTML', reply_markup: { inline_keyboard: inlineKeyboard } });
      } else {
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É', true);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏', true);
    }
});

bot.action('load_data', async (ctx) => {
    if (!ctx.session.xlsxData) {
      ctx.reply('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞.');
      return;
    }
  
    const data = ctx.session.xlsxData;
  
    try {
      for (const row of data) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
        await PostFile.create({ data: row.filter(cell => cell !== null) }); // –ò—Å–∫–ª—é—á–∞–µ–º null (–ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏)
      }
  
      ctx.reply(`–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –ø–æ—Å—Ç–æ–≤.`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    } finally {
      delete ctx.session.xlsxData;
    }
  });


bot.on('text', async (ctx) => {
    if (ctx.session.rssLink) {
        const channelOrGroupId = ctx.message.text;
        const userId = ctx.from.id;
        const rssLink = ctx.session.rssLink;

        try {
            await saveSubscription(bot, userId, rssLink, channelOrGroupId);
            ctx.reply(`–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${rssLink} –¥–ª—è –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã: ${channelOrGroupId}`);
            delete ctx.session.rssLink;
        } catch (error) {
            console.error(error);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ.');
        }
    }
});


bot.action('start_autoposting', async (ctx) => {
    await ctx.scene.enter('autopostingScene');
});


bot.action('pause_autoposting', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    await updateUserAutopostingStatus(userId, { autopostingActive: false });

    await ctx.reply('–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –Ω–∞–∂–∞–≤ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥".', Markup.inlineKeyboard([
        Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥', 'resume_autoposting')
    ]));
});

bot.action('cancel_autoposting', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    await cancelUserAutoposting(userId);

    await ctx.reply('–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.', Markup.inlineKeyboard([
        Markup.button.callback('–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥', 'start_autoposting'),
        Markup.button.callback('–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã', 'autopostfile')
    ]));
});

bot.action('resume_autoposting', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    await updateUserAutopostingStatus(userId, { autopostingActive: true });

    await ctx.reply('–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ—Å—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π.');
});

const checkAndSendUpdates = async () => {
    const subscriptions = await getSubscriptions();

    for (const subscription of subscriptions) {
        const { channelId, rssLink } = subscription;
        if (!channelId) {
            //console.warn(`chatId –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${rssLink} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`);
            continue;
        }

        const newPosts = await rssService.getNewRSSPosts(rssLink, channelId);
        for (const post of newPosts) {
            try {
                if (post.imagePath) {
                    await bot.telegram.sendPhoto(channelId, {
                        source: fs.createReadStream(post.imagePath),
                        caption: post.formattedPost,
                        parse_mode: 'HTML'
                    });
                    fs.unlinkSync(post.imagePath);
                } else {
                    await bot.telegram.sendMessage(channelId, post.formattedPost, { parse_mode: 'HTML', disable_web_page_preview: true });
                }
            } catch (error) {
                if (error.response && error.response.error_code === 429) {
                    const retryAfter = error.response.parameters.retry_after * 1000;
                    console.log(`Waiting for ${retryAfter}ms before retrying...`);
                    setTimeout(() => checkAndSendUpdates(), retryAfter);
                    return;
                } else {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${channelId}:`, error);
                }
            }
        }
    }
};

async function checkBotAdminRights(ctx, chatId) {
    try {
        const member = await ctx.telegram.getChatMember(chatId, ctx.botInfo.id);
        if (member.status === 'administrator' && member.can_post_messages) {
            return true;
        } else {
            return false;
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞:", error);
        return false;
    }
}

async function safeSendMessage(ctx, chatId, message, options) {
    try {
        await ctx.telegram.sendMessage(chatId, message, options);
    } catch (error) {
        if (error.code === 429) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            const retryAfter = error.parameters.retry_after;
            console.log(`Rate limit hit, waiting for ${retryAfter} seconds`);
            await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            await ctx.telegram.sendMessage(chatId, message, options);
        } else {
            throw error; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏, –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
        }
    }
}

function formatTime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secondsLeft = seconds % 60;

    return [
        hours.toString().padStart(2, '0'),
        minutes.toString().padStart(2, '0'),
        secondsLeft.toString().padStart(2, '0')
    ].join(':');
}

async function startAutoposting(ctx, chatId, userId, projectId, delay) {
    const projectExists = await UserProject.exists({ _id: projectId, userID: userId });
    if (!projectExists) {
        await ctx.reply("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.");
        return;
    }

    const postsToSend = await PostFile.find({ projectId: projectId, isSent: false });
    const totalPosts = postsToSend.length;
    let sentCount = 0;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ
    const statusMessage = await ctx.reply(`–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.\n\n–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n–°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: ${totalPosts}\n\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: ${totalPosts * delay / 1000} —Å–µ–∫—É–Ω–¥\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.`);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
    const updateStatusMessage = async () => {
        const sentPosts = await PostFile.countDocuments({ projectId: projectId, isSent: true });
        const remainingPosts = totalPosts - sentPosts;
        const estimatedTimeSeconds = remainingPosts * delay / 1000;
        const estimatedTimeFormatted = formatTime(estimatedTimeSeconds);
    
        await ctx.telegram.editMessageText(ctx.chat.id, statusMessage.message_id, null, `<b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.</b>\n\n–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentPosts}\n–°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: ${remainingPosts}\n\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: ${estimatedTimeFormatted}\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.`, { parse_mode: 'HTML' });
    };

    const messageTemplate = `
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {0},
–¥—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {17} 
<b>–ò–ù–ù</b> {1} –∏ <b>–ö–ü–ü</b> {2}
<b>–ê–¥—Ä–µ—Å:</b> {3}
    
<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {4} {5} {6}
–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {7}
    
–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≠–î–û: {13}
    
#–†–µ–π—Ç–∏–Ω–≥
#–∏–Ω–Ω{1} #–∫–ø–ø{2}
#–†–µ–π—Ç–∏–Ω–≥–ú–æ—Å–∫–û–±–ª–°—Ç–æ–∏–º–æ—Å—Ç—å–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  
<b>–ñ–º–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–æ–ø–æ–ª–Ω—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: –ø—Ä–∞–π—Å, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –æ—Ç–∑—ã–≤—ã, –∫–∞–∫ –ø—Ä–æ–π—Ç–∏ –∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</b>
<b>–¢–µ–ª–µ—Ñ–æ–Ω—ã:</b> {8}
email: {9}
`;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    for (let i = 0; i < totalPosts; i++) {
        const post = postsToSend[i];
        setTimeout(async () => {
            if (!post.isSent) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
                const formattedMessage = formatPostMessage(post, messageTemplate);
                await safeSendMessage(ctx, chatId, formattedMessage, { parse_mode: 'HTML' });
                post.isSent = true;
                await post.save();
                sentCount++;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await updateStatusMessage();
            }
        }, delay * i);
    }

    // –ó–¥–µ—Å—å –Ω–µ—Ç –Ω—É–∂–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
}



setInterval(checkAndSendUpdates, 60000);

bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
});
