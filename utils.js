// utils.js
const { Markup } = require('telegraf');

const successMessage = async (ctx, message) => {
    await ctx.replyWithHTML(message);
};

const errorFileMessage = async (ctx, message) => {
    await ctx.replyWithHTML(message, Markup.inlineKeyboard([
        [
            Markup.button.callback('üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª', 'autopostfile')
        ]
    ]));
};

async function successMessageWithQuestion(ctx, message, loadedPostsCount) {
    await ctx.replyWithHTML(`${message}\n\n–£ –í–∞—Å –≤ –ë–î —É–∂–µ ${loadedPostsCount} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤. –ñ–µ–ª–∞–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥?`, Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥', 'start_autoposting'),
        Markup.button.callback('üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë', 'autopostfile')
      ],
      [
        Markup.button.callback('‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ—Å—Ç–æ–≤', 'set_template')
      ]
    ]));
  }

  function formatPostMessage(post) {
    return `${post.title}\n\n${post.text}\n\n${post.additionalInfo}`;
}

function extractDomainName(url) {
  const matches = url.match(/^https?:\/\/([^/?#]+)(?:[/?#]|$)/i);
  return matches && matches[1] ? matches[1] : '';
}

module.exports = { extractDomainName, formatPostMessage, errorFileMessage, successMessage, successMessageWithQuestion };